.TH printf 3 "17 Mar 2020" "0.32" "Holberton Printf Page"
.SH NAME
.B printf - formatted output conversion
.SH SYNOPSIS
#include <stdio.h>
int printf(const char *format, ...);
.SH DESCRIPTION
The  functions  in the printf() family produce output according to a format as described below.  The function printf() write output to stdout, the standard output stream
These function write the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the
variable-length argument facilities of stdarg(3)) are converted for output.
.SS Return value
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).
If an output error is encountered, a negative value is returned.
.SS Format of the format string
The  format  string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more
directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results  in
fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a conversion specifier.
In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an  optional  length  modi‚Äê
fier.

The  arguments  must  correspond  properly  (after type promotion) with the conversion specifier.  By default, the arguments are used in the order
given, where each '*' and each conversion specifier asks for the next argument (and it is an error if insufficiently many  arguments  are  given).
One  can  also  specify explicitly which argument is taken, at each place where an argument is required, by writing "%m$" instead of '%' and "*m$"
instead of '*', where the decimal integer m denotes the position in the argument list of the desired argument, indexed starting from 1.  Thus,

           printf("%*d", width, num);

       and

           printf("%2$*1$d", width, num);

       are equivalent.
.SS The conversion specifier
A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:

d, i   The int argument is converted to signed decimal notation.

c      The int argument is converted to an unsigned char, and the resulting character is written.

s      The const char * argument is expected to be a pointer to an array of character type  (pointer  to  a  string).
       Characters  from  the array are written up to (but not including) a terminating null byte ('\0')
%      A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
.SH OPTIONS
.B holberton
does not take any options. However, you can supply studentname.
.SH SEE ALSO
.I peerlearning(2), projectbased(2), fullstack(2), Betty(1),  printf(1)
.SH AUTHOR
Eduard Sneyder Amador, Andres Felipe Ariza.